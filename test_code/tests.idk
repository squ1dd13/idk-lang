proc testForLoops() {
    finally print("All loop tests passed.");
    
    for let i = 0; i < 10; i++ {
    }

    for let i = 0; i < 10 {
        i++;
    }

    for let i = 0 {
        if i >= 10 {
            break;
        }

        i++;
    }

    let i = 0;
    for {
        if i >= 10 {
            break;
        }

        i++;
    }

    for let x = 0; x < 10; x++ {
        for let y = 0; y < 10; y++ {
            if x + y == 10 {
                break outerLoop;
            }
        }
    } outerLoop;

    print("All loop tests passed.");
}

proc testReferenceChanges() {
    let a = 1;
    let ref -> a;

    if ref != 1 {
        fatal("Reference not passing through to target.");
    }

    a = 2;

    if ref as int != 2 {
        fatal("Reference value did not change after value change.");
    }

    ref = 1;

    if a != 1 {
        fatal("Value did not change after setting through reference.");
    }

    int b = 3;
    ref -> b;

    if ref != 3 {
        fatal("Reference does not resolve to redirected target.");
    }

    if a == 3 {
        fatal("Redirection changed previous target's value.");
    }

    ref = 4;

    if b != 4 {
        fatal("Redirected reference did not change new target's value.");
    }

    if a == 4 {
        fatal("Redirected reference changed previous target's value.");
    }

    print("All reference change tests passed.");
}

proc testReturnValues() {
    int someFunction(int a, int b) {
        return a + b;
    }

    int result = someFunction(1, 2);

    if result != 3 {
        fatal("1 + 2 != 3");
    }

    print("All return value tests passed.");
}

proc testIndexedAccess() {
    #String someStrings = {
        "this",
        "is",
        "a",
        "collection"
    };

    if someStrings[0] != "this" {
        fatal("Failed index access test!");
    }

    someStrings[1] = "might be";

    if someStrings[1] != "might be" {
        fatal("Failed index assignment test!");
    }

    print("All index tests passed.");
}

Type Array(Type someType) {
    return #someType;
}

proc testOperators() {
    print(-> Array);

    if (1 + 2) != 3 {
        fatal("Failed basic test.");
    }

    if (1 + -2 + 3 + -4 + 5 + -6) != -3 {
        fatal("Failed addition operator test.");
    }

    if (1 - -2 - 3 - -4 - 5 - -6) != 5 {
        fatal("Failed subtraction operator test.");
    }

    if (1 * 2 * -3 * 4 * -5) != 120 {
        fatal("Failed multiplication operator test.");
    }

    if (-5 % 2) != 1 {
        fatal("Failed modulus operator test.");
    }

    int returnNumber(int a, int b) {
        return a * b;
    }

    int giveMeNumber(int a, int b) {
        return a + b;
    }

    int result = (2 + (returnNumber((((2 + 4) / 1) / (2 + 4)) * 2, 3) * giveMeNumber(1, 1)) + giveMeNumber(1, 3)) / 3;
    if result != 6 {
        fatal("Failed complex function-based expression.");
    }

    // Create an array of function references.
    Array(@Any) functions = {
        -> returnNumber,
        -> giveMeNumber
    };

    int result2 = (2 + (functions[0]((((2 + 4) / 1) / (2 + 4)) * 2, 3) * functions[1](1, 1)) + functions[1](1, 3)) / 3;
    if result2 != 6 {
        fatal("Failed complex function/array-based expression.");
    }

    print("All operator tests passed.");
}

// Linear search maps. Hmmmm...
class Map {
    // class MapType of Type {
    //     Type key = null;
    //     Type value = null;

    //     new create(self.key, self.value);
    // }

    // type {
    //     Type key = null;
    //     Type value = null;

    //     // You can't have a named type constructor, so overloads for them
    //     //  might be introduced in the future to allow for more useful
    //     //  complex types.
    //     new (self.key, self.value);
    // }

    Array(Any) keys = {};
    Array(Any) values = {};

    new withKeysAndValues(self.keys, self.values);

    Any get(Any key) {
        for let i = 0; i < keys.length; i++ {
            if keys[i] == key {
                return values[i];
            }
        }

        fatal("Key not found in map!");
    }
}

class ClassOne {
    String something = "";

    new empty() {
        something = "empty";
    }

    new new();

    new withString(self.something);

    int classNumber() {
        return 1;
    }

    int classNumberAgain() {
        return classNumber();
    }
}

class ClassTwo of ClassOne {
    int classNumber!() {
        return 2;
    }

    new new();
}

class ClassThree of ClassTwo {
    int classNumber!() {
        return 3;
    }

    new new();
}

space core {
    abstract Stringable {
        String toString() {}
    }

    space io {
        class DummyFile {
            String path = null;
        
            new open(self.path);
        
            proc close() {
                print("Closing file: " + path);
            }
        }
    }
}

space runtime {
    class Exception of core:Stringable {
        String message = "<nothing>";

        new from(self.message);

        String toString!() {
            return "Exception: " + message;
        }
    }

    class RuntimeException of Exception {
        new from(super.message);

        String toString!() {
            return "Runtime exception: " + message;
        }
    }
}

proc testClasses() {
    let file = core:io:DummyFile:open("/path/to/something.txt");
    finally file.close();

    let exception = runtime:Exception:from("Something bad happened!");
    let runtimeException = runtime:RuntimeException:from("Something bad happened at runtime!");

    let dartString = makeDart("Hello, world!");
    print(dartString);
    print(dartString.length);
    print(dartString.isEmpty);
    print(dartString.isNotEmpty);
    print(dartString.codeUnits);
    print(dartString.contains("world", 0));
    print(dartString.toUpperCase());

    // Return values are translated if possible, so we have to convert them 
    //  back to Dart objects if we need to use them as such. This will not
    //  change; it shouldn't be an issue because there should be as little
    //  reliance on Dart interoperability as possible.
    print(makeDart(dartString.toUpperCase()).contains("WORLD", 0));
    print(makeDart(dartString.toUpperCase()).contains("WORLd", 0));

    // throw exception;
    
    print(exception.toString());
    print(runtimeException.toString());

    // try {
    //     somethingUnsafe();
    // } catch exception {
    //     print(exception);
    // }

    Array(Any) keys = { 1, 2, 3, 4, 5 };
    Array(Any) values = { "one", "two", "three", "four", "five" };

    let myMap = Map:withKeysAndValues(
        keys, values
    );

    print(myMap.get(2));

    // The ":" operator gets a static member, which includes constructors.
    let sugary = ClassOne:withString("cool");
    print(sugary.something);

    let classOne = ClassOne:new();
    let classTwo = ClassTwo:new();
    let classThree = ClassThree:new();

    int combinedNumbers(ClassOne instance) {
        return instance.classNumber() + instance.classNumberAgain();
    }

    if combinedNumbers(classOne) != 2 {
        fatal("ClassOne numbers failed!");
    }

    if combinedNumbers(classTwo) != 4 {
        fatal("ClassTwo numbers failed!");
    }

    if combinedNumbers(classThree) != 6 {
        fatal("ClassThree numbers failed!");
    }

    print("All class tests passed.");
}

testReferenceChanges();
testForLoops();
testReturnValues();
testIndexedAccess();
testOperators();
testClasses();